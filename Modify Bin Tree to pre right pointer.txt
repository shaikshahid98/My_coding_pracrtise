#include <bits/stdc++.h> 
using namespace std; 
  
// A binary tree node has data, 
// left child and right child 
struct Node { 
    int data; 
    struct Node* left; 
    struct Node* right; 
}; 
  
// function that allocates a new node 
// with the given data and NULL left 
// and right pointers. 
struct Node* newNode(int data) 
{ 
    struct Node* node = new struct Node; 
    node->data = data; 
    node->left = NULL; 
    node->right = NULL; 
    return (node); 
} 

void get( Node *p,stack<Node*> &st)
{
    if(!p) return;
    if(p->left)
    {
            if(p->right)
                st.push(p->right);
            p->right= p->left;
            p->left=NULL;
            get(p->right,st);
        
    }
    else
    {
        get(p->right,st);
    }
}
void getl(Node * &p,stack<Node*> &st,int n)
{
    if(p->right)
        getl(p->right,st,n);
    if(st.size()==0)
        return;
    auto tmp= st.top();
    st.pop();
    p->right= tmp;
    getl(p->right,st,n);
}
struct Node* modifytree(struct Node* root) 
{ 
    stack<Node*> st;
    Node* curr=root;
    Node *newr=root;
    get(curr,st);
    curr=newr;
    getl(curr,st,st.size());
    return newr;
    
    
    
    
    
    // struct Node* right = root->right; 
    // struct Node* rightMost = root; 
  
    // // if the left tree exists 
    // if (root->left) { 
  
    //     // get the right-most of the 
    //     // original left subtree 
    //     rightMost = modifytree(root->left); 
  
    //     // set root right to left subtree 
    //     root->right = root->left; 
    //     root->left = NULL; 
    // } 
  
    // // if the right subtree does 
    // // not exists we are done! 
    // if (!right)  
    //     return rightMost; 
  
    // // set right pointer of right-most 
    // // of the original left subtree 
    // rightMost->right = right; 
  
    // // modify the rightsubtree 
    // rightMost = modifytree(right); 
    // return rightMost; 
} 
  
// printing using right pointer only 
void printpre(struct Node* root) 
{ 
    while (root != NULL) { 
        cout << root->data << " "; 
        root = root->right; 
    } 
} 
  
// Driver program to test above functions 
int main() 
{ 
    /* Constructed binary tree is 
         10 
        / \ 
       8   2 
      / \   
     3   5     */
    struct Node* root = newNode(10); 
    root->left = newNode(8); 
    root->right = newNode(2); 
    root->left->left = newNode(3); 
    root->left->right = newNode(5); 
  
    modifytree(root); 
    printpre(root); 
  
    return 0; 
} 