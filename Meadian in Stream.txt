#include <bits/stdc++.h>
using namespace std;
int main() {
    int testCases ; 
    cin >> testCases ; 
    while(testCases--){
        long n ;
        long median ;
        priority_queue<long , vector<long> , greater<long> > minHeap ; 
        priority_queue<long> maxHeap ; 
        int minSize = 0 ;
        int maxSize = 0 ;
        int size ;
        cin >> size ;

        median = 0;
        while(size--){

            cin >> n;

            if(n < median){
                maxHeap.push(n);
                maxSize++ ; 
            }
            else {
                minHeap.push(n);
                minSize ++ ; 
            }
            if(abs(minSize - maxSize) == 2){
                //Imbalance
                if(minSize > maxSize){
                    long temp = minHeap.top() ; 
                    minHeap.pop() ; 
                    minSize -- ;
                    maxHeap.push(temp);
                    maxSize ++ ; 
                }
                else {
                    long temp = maxHeap.top();
                    maxHeap.pop(); 
                    maxSize--;
                    minHeap.push(temp);
                    minSize++;
                }
            }

            //Recalculate median after every iteration
            if(minSize == maxSize){
                median = ( minHeap.top() + maxHeap.top() )/ 2 ;
            }
            else if(minSize > maxSize){
                median = minHeap.top() ;
            }
            else {
                median = maxHeap.top() ;
            }

            cout << median << " ";
        }
        cout << endl;
    }


    return 0;    
}

 ---------------------------------------------
class MedianFinder {
public:
    priority_queue<int> mx;
    priority_queue<int,vector<int>,greater<int>> mn;
    /** initialize your data structure here. */
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        mx.push(num);
        mn.push(mx.top());
        mx.pop();
        if(mx.size()<mn.size())
        {
            mx.push(mn.top());
            mn.pop();
        }
    }
    
    double findMedian() {
        return  (mx.size()>mn.size()) ? mx.top() : (double) (mx.top()+mn.top()) * (0.5);
    }
};

------------------------------------------------------------------------------------------
class MedianFinder {
public:
    priority_queue<int> mx;
    priority_queue<int,vector<int>,greater<int>> mn;
    vector<int> vec;
    /** initialize your data structure here. */
    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if(vec.empty()) vec.push_back(num);
        else
            vec.insert(lower_bound(vec.begin(),vec.end(),num),num);
    }
    
    double findMedian() {
       int n=vec.size();
        return (n%2==1) ?(double) vec[n/2] : (double)(vec[n/2]+vec[(n/2)-1]) * (0.5);
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */