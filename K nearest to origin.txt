class Solution {
public:
   static  bool compare(vector<int> v1,vector<int> v2)
    {
        int x = v1[0]*v1[0]+v1[1]*v1[1];
        int y = v2[0]*v2[0]+v2[1]*v2[1];
        return x<y;
    }
    vector<vector<int>> kClosest(vector<vector<int>>& po, int K) {
        vector<vector<int>> ans;
        sort(po.begin(),po.end(),compare);
        for(int i=0;i<K;i++)
            ans.push_back(po[i]);
        return ans;
    }
};


class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& po, int K) {
        int i,j,k;
        vector<vector<int>> res;
        int dis[po.size()];
        for(i=0;i<po.size();i++)
        dis[i]=dist(po[i]);
        sort(dis,dis+po.size());
        //for(int i:dis) cout<<i<<" ";
        int disk=dis[K-1];
        for(i=0;i<po.size();i++)
        {
            if(dist(po[i])<=disk)
                res.push_back(po[i]);
            
        }
        return res;
        
    }
    int dist(vector<int> p)
    {
        return p[0]*p[0]+p[1]*p[1];
    }
};